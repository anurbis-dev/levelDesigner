/**
 * Auto Event Handler Manager
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–∫–æ–Ω
 */

import { Logger } from '../utils/Logger.js';
import { eventHandlerManager } from './EventHandlerManager.js';
import { UniversalWindowHandlers } from '../handlers/UniversalWindowHandlers.js';

export class AutoEventHandlerManager {
    constructor() {
        this.registeredWindows = new Map(); // Map<windowId, { instance, type, handlers }>
        this.observer = null;
        this.initialized = false;
        Logger.event.info('üîÑ Auto Event Handler Manager created');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutoEventHandlerManager –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
     */
    init() {
        if (this.initialized) return;

        this.initialized = true;
        this.setupAutoRegistration();
        Logger.event.info('üîÑ Auto Event Handler Manager initialized');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    setupAutoRegistration() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–∫–æ–Ω
        this.observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        this.checkForNewWindow(node);
                    }
                });
            });
        });

        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
        this.observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        Logger.event.debug('AutoEventHandlerManager: Auto-registration observer started');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–∫–æ–Ω
     * @param {HTMLElement} element - –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
     */
    checkForNewWindow(element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–∫–Ω–æ–º
        const windowInfo = this.detectWindowType(element);
        if (windowInfo) {
            Logger.event.info(`AutoEventHandlerManager: Found window ${element.id} of type ${windowInfo.type}, instance: ${windowInfo.instance ? 'found' : 'not found'}`);
            this.registerWindowAutomatically(element, windowInfo);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const childWindows = element.querySelectorAll('[id*="overlay"], [id*="dialog"], [id*="window"]');
        childWindows.forEach(child => {
            const childWindowInfo = this.detectWindowType(child);
            if (childWindowInfo) {
                Logger.event.debug(`AutoEventHandlerManager: Found child window ${child.id} of type ${childWindowInfo.type}`);
                this.registerWindowAutomatically(child, childWindowInfo);
            }
        });
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–∫–Ω–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
     * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {Object|null} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –æ–∫–Ω–∞ –∏–ª–∏ null
     */
    detectWindowType(element) {
        const id = element.id;
        const className = element.className;
        
        Logger.event.debug(`AutoEventHandlerManager: Checking element ${id} with class ${className}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏ –∫–ª–∞—Å—Å–∞–º
        const windowTypes = [
            { id: 'settings-overlay', class: 'settings-panel-container', type: 'settings', instance: 'SettingsPanel' },
            { id: 'actor-properties-overlay', class: 'actor-properties-container', type: 'actor-properties', instance: 'ActorPropertiesWindow' },
            { id: 'universal-dialog-overlay', class: 'universal-dialog', type: 'universal-dialog', instance: 'UniversalDialog' },
            { id: 'asset-panel-container', class: 'asset-panel-container', type: 'asset-panel', instance: 'AssetPanel' }
        ];
        
        for (const windowType of windowTypes) {
            if (id === windowType.id || className.includes(windowType.class)) {
                Logger.event.info(`AutoEventHandlerManager: Detected window type ${windowType.type} for element ${id}`);
                return { type: windowType.type, instance: this.findWindowInstance(windowType.instance) };
            }
        }
        
        return null;
    }

    /**
     * –ü–æ–∏—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–∫–Ω–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
     * @param {string} windowType - –¢–∏–ø –æ–∫–Ω–∞
     * @returns {Object|null} –≠–∫–∑–µ–º–ø–ª—è—Ä –æ–∫–Ω–∞ –∏–ª–∏ null
     */
    findWindowInstance(windowType) {
        if (!window.editor) {
            Logger.event.warn(`AutoEventHandlerManager: window.editor not found for ${windowType}`);
            return null;
        }
        
        const instanceMap = {
            'SettingsPanel': 'settingsPanel',
            'ActorPropertiesWindow': 'actorPropertiesWindow',
            'AssetPanel': 'assetPanel',
            'UniversalDialog': null // –°–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        };
        
        const propertyName = instanceMap[windowType];
        const instance = propertyName ? window.editor[propertyName] : null;
        
        if (instance) {
            Logger.event.info(`AutoEventHandlerManager: Found instance ${propertyName} for ${windowType}`);
        } else {
            Logger.event.warn(`AutoEventHandlerManager: No instance found for ${windowType} (property: ${propertyName})`);
        }
        
        return instance;
    }


    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–Ω–∞
     * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –æ–∫–Ω–∞
     * @param {Object} windowInfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –æ–∫–Ω–∞
     */
    registerWindowAutomatically(element, windowInfo) {
        const { type, instance } = windowInfo;
        const windowId = element.id || `auto-window-${Date.now()}`;

        Logger.event.debug(`AutoEventHandlerManager: Registering window ${windowId} of type ${type}, instance: ${instance ? 'found' : 'not found'}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
        if (this.registeredWindows.has(windowId)) {
            Logger.event.debug(`AutoEventHandlerManager: Window ${windowId} already registered`);
            return;
        }

        // –ï—Å–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∑–∂–µ
        if (!instance) {
            Logger.event.debug(`AutoEventHandlerManager: Instance not found for ${windowId}, will register later`);
            this.registeredWindows.set(windowId, {
                instance: null,
                type,
                handlers: null,
                element,
                pending: true
            });
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const handlers = UniversalWindowHandlers.createUniversalHandlers(instance, type);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ EventHandlerManager
        try {
            eventHandlerManager.registerElement(
                element,
                'dialog',
                {
                    handlers: {
                        click: handlers.onClick,
                        contextmenu: handlers.onContextMenu
                    },
                    context: instance || this,
                    globalHandlers: {
                        keydown: (e) => {
                            if (e.key === 'Escape') {
                                handlers.onEscape();
                            }
                        },
                        overlayClick: handlers.onOverlayClick
                    }
                },
                windowId
            );

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–∫–Ω–µ
            this.registeredWindows.set(windowId, {
                instance,
                type,
                handlers,
                element,
                pending: false
            });

            Logger.event.info(`AutoEventHandlerManager: Window ${windowId} (${type}) registered automatically`);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            this.setupInputHandlers(element, instance, type);

        } catch (error) {
            Logger.event.error(`AutoEventHandlerManager: Failed to register window ${windowId}:`, error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
     * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç –æ–∫–Ω–∞
     * @param {Object} instance - –≠–∫–∑–µ–º–ø–ª—è—Ä –æ–∫–Ω–∞
     * @param {string} type - –¢–∏–ø –æ–∫–Ω–∞
     */
    setupInputHandlers(element, instance, type) {
        const inputs = element.querySelectorAll('input, textarea, select');
        
        inputs.forEach((input, index) => {
            const inputId = input.id || `auto-input-${Date.now()}-${index}`;
            const inputHandlers = UniversalWindowHandlers.createInputHandlers(instance, type);
            
            try {
                eventHandlerManager.registerElement(
                    input,
                    'input',
                    {
                        handlers: inputHandlers,
                        context: instance || this
                    },
                    inputId
                );
            } catch (error) {
                Logger.event.warn(`AutoEventHandlerManager: Failed to register input ${inputId}:`, error);
            }
        });
    }


    /**
     * –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∫–Ω–∞
     * @param {string} windowId - ID –æ–∫–Ω–∞
     */
    unregisterWindow(windowId) {
        if (this.registeredWindows.has(windowId)) {
            const windowInfo = this.registeredWindows.get(windowId);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ EventHandlerManager
            eventHandlerManager.unregisterElement(windowId);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
            this.registeredWindows.delete(windowId);
            
            Logger.event.info(`AutoEventHandlerManager: Window ${windowId} unregistered`);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω (–∫–æ–≥–¥–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–µ–Ω)
     */
    registerPendingWindows() {
        for (const [windowId, windowInfo] of this.registeredWindows) {
            if (windowInfo.pending) {
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ detectWindowType
                const windowTypeInfo = this.detectWindowType(windowInfo.element);
                const instance = windowTypeInfo ? windowTypeInfo.instance : null;
                if (instance) {
                    Logger.event.debug(`AutoEventHandlerManager: Found instance for pending window ${windowId}`);
                    
                    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    const handlers = UniversalWindowHandlers.createUniversalHandlers(instance, windowInfo.type);
                    
                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ EventHandlerManager
                    try {
                        eventHandlerManager.registerElement(
                            windowInfo.element,
                            'dialog',
                            {
                                handlers: {
                                    click: handlers.onClick,
                                    contextmenu: handlers.onContextMenu
                                },
                                context: instance,
                                globalHandlers: {
                                    keydown: (e) => {
                                        if (e.key === 'Escape') {
                                            handlers.onEscape();
                                        }
                                    },
                                    overlayClick: handlers.onOverlayClick
                                }
                            },
                            windowId
                        );

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –æ–∫–Ω–µ
                        windowInfo.instance = instance;
                        windowInfo.handlers = handlers;
                        windowInfo.pending = false;

                        Logger.event.info(`AutoEventHandlerManager: Pending window ${windowId} (${windowInfo.type}) registered`);

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
                        this.setupInputHandlers(windowInfo.element, instance, windowInfo.type);

                    } catch (error) {
                        Logger.event.error(`AutoEventHandlerManager: Failed to register pending window ${windowId}:`, error);
                    }
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–∫–Ω–∞—Ö
     * @returns {Array} –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–∫–æ–Ω
     */
    getRegisteredWindows() {
        return Array.from(this.registeredWindows.entries()).map(([id, info]) => ({
            id,
            type: info.type,
            instance: info.instance,
            element: info.element,
            pending: info.pending
        }));
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    destroy() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
        if (this.observer) {
            this.observer.disconnect();
        }

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–∫–Ω–∞
        this.registeredWindows.forEach((_, windowId) => {
            this.unregisterWindow(windowId);
        });

        Logger.event.info('üîÑ Auto Event Handler Manager destroyed');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const autoEventHandlerManager = new AutoEventHandlerManager();
